from qiskit import Aer
from qiskit_optimization.applications import TSP
from qiskit_optimization.algorithms import MinimumEigenOptimizer
from qiskit_optimization.converters import QuadraticProgramToQubo
from qiskit.algorithms import QAOA
from qiskit.utils import algorithm_globals

# Définir les distances entre les villes
distances = [
    [0, 1, 2, 3],
    [1, 0, 4, 5],
    [2, 4, 0, 6],
    [3, 5, 6, 0]
]

# Créer une instance de TSP
tsp = TSP(dist_matrix=distances)

# Générer le problème d'optimisation quadratique
qp = tsp.to_quadratic_program()

# Convertir le problème quadratique en un problème QUBO
qp_to_qubo = QuadraticProgramToQubo()
qubo = qp_to_qubo.convert(qp)

# Configurer l'algorithme QAOA
seed = 123
algorithm_globals.random_seed = seed
backend = Aer.get_backend('aer_simulator')
qaoa = QAOA(quantum_instance=backend)

# Utiliser QAOA pour résoudre le problème QUBO
optimizer = MinimumEigenOptimizer(qaoa)
result = optimizer.solve(qubo)

# Afficher la solution
print("Solution:", tsp.interpret(result))